#
# moksha - Pylons development environment configuration
#
# The %(here)s variable will be replaced with the parent directory of this file
#
# This file is for deployment specific config options -- other configuration
# that is always required for the app is done in the config directory, 
# and generally should not be modified by end users. 

[DEFAULT]
debug = true
# Uncomment and replace with the address which should receive any error reports
#email_to = you@yourdomain.com
smtp_server = localhost
error_email_from = paste@localhost

[server:main]
use = egg:Paste#http
host = 0.0.0.0
port = 8080

[app:main]
use = egg:moksha
full_stack = true
#lang = ru
cache_dir = %(here)s/data
beaker.session.key = moksha
beaker.session.secret = somesecret

beaker.cache.type = memory
#beaker.cache.type = ext:memcached
#beaker.cache.url = localhost:11211

# If you'd like to fine-tune the individual locations of the cache data dirs
# for the Cache data, or the Session saves, un-comment the desired settings
# here:
#beaker.cache.data_dir = %(here)s/data/cache
#beaker.session.data_dir = %(here)s/data/sessions

##
## Moksha-specific configuration options
##

# moksha.domain - Domain used for XSS communication.
#
# If your webapp and orbited live on app.live.example.com,
# just set this to app.live.example.com and you're done.
#
# If your webapp lives on app.live.example.com and orbited lives on
# orbited.live.example.com, you need to set this to a suffix of the two, like:
# moksha.domain = live.example.com
#
moksha.domain = localhost


# Enable the Moksha Extension Point Middleware
moksha.extensionpoints = True

# Number of seconds between polling feeds
feed.poll_frequency = 35
# Where to store the feed caches.
#feed_cache = sqlite:///%(here)s/feeds.db
# Max age (in seconds) of each feed in the cache
feed.max_age = 300
# Timeout in seconds for the web request
feed.timeout = 60
# The number of simultaneous connections
feed.deferred_groups = 3

# Where to initialize and store our application databases.  %s is the app name.
app_db = sqlite:///%(here)s/moksha_app.db

# Note: for postgres/mysql, these app-specific dbs needs to be created by hand
#app_db = postgres://moksha:m0ksh4@localhost/%s


##
## Moksha Live Socket configuration
##

# A machine-local zeromq interprocess socket, typically
moksha.monitoring.socket = ipc:///var/tmp/moksha-monitoring
moksha.workers_per_consumer = 1
moksha.monitoring.socket.mode = 770

# Automatically inject the Moksha live socket with
# the Global Resource Injection Widget
moksha.livesocket = True

# The backing protocol for live widgets.
# Available backends: stomp, amqp, websocket
moksha.livesocket.backend = websocket

# TODO -- change the following two to 'livesocket' from socket
# jGrowl notifications for socket state changes
moksha.socket.notify = True

# How often should the client websocket attempt to reconnect if
# the moksha-hub goes away?  Reconnection attempts are disabled
# if this is unspecified.
#moksha.socket.reconnect_interval = 5000

# Only required for websocket
moksha.livesocket.websocket.port = 9998

# The location of our Orbited server
orbited_host = localhost
orbited_port = 9000
orbited_scheme = http

## Stomp broker configuration.
## By default we use the MorbidQ broker, run by Orbited, for development.
#stomp_broker = localhost
#stomp_port = 61613
## This is an optional heartbeat, in milliseconds
#stomp_heartbeat = 1000
## If stomp_uri is present, stomp_broker and stomp_port are ignored
#stomp_uri = localhost:61613
## If there are multiple uris, then a failover() method is employed at runtime
#stomp_uri = localhost:61613,localhost:61614
## Authentication options
#stomp_user = guest
#stomp_pass = guest
#stomp_ssl_crt = /path/to/an/optional.crt
#stomp_ssl_key = /path/to/an/optional.key
#stomp_ack_mode = auto

# Optional AMQP Broker
#amqp_broker = guest/guest@localhost
#amqp_broker_host = localhost
#amqp_broker_port = 5672
#amqp_broker_user = guest
#amqp_broker_pass = guest
#amqp_broker_ssl = False

# Optional MQTT Broker
mqtt = True
mqtt_hostname = test.mosquitto.org
#mqtt_port = 1883
#mqtt_client_id = None
#mqtt_keepalive = 60
#mqtt_username = username
#mqtt_password = password
#mqtt_ca_certs = '/path/to/an/root-ca.crt'
#mqtt_certfile = '/path/to/an/server.crt'
#mqtt_keyfile = '/path/to/an/server.key'
#mqtt_qos = 0

# Optional zeroMQ pub/sub pattern
zmq_enabled = True
zmq_publish_endpoints = tcp://*:6543
zmq_subscribe_endpoints = tcp://127.0.0.1:6543

# Force zeromq topic subscription to only forward messages whose
# topics strictly match.
zmq_strict = True

## The hub can subscribe by either zmq bind or zmq connect.
#zmq_subscribe_method = connect

# Metrics app enabled?
mdemos.metrics.stream = False

# What backend to use for the feeds app?
mdemos.feeds.feedtree.engine = live

# Documentation directory
docs_dir = docs
# docs_dir = /srv/moksha/docs

chat.backend = irc://irc.freenode.net:6667
chat.rooms = default
chat.default.staticRoomName = moksha
chat.default.roomAssignmentMode = static
chat.default.display.greeting = Moksha Chat

# Use a built-in IRC server
#chat.backend = irc://localhost:9999
#chat.builtin = true
#chat.default.display.floating = true
#chat.default.display.floatingToggle = false
#chat.default.display.width = 400
#chat.default.display.height = 300
#chat.default.display.theme = simple
#chat.default.display.resizable = true

# pick the form for your database
# %(here) may include a ':' character on Windows environments; this can
# invalidate the URI when specifying a SQLite db via path name
# sqlalchemy.url=postgres://username:password:port@hostname/databasename 
# sqlalchemy.url=mysql://username:password@hostname:port/databasename


# If you have sqlite, here's a simple default to get you started
# in development

sqlalchemy.url = sqlite:///%(here)s/devdata.db
sqlalchemy.echo = true
sqlalchemy.echo_pool = false
sqlalchemy.pool_recycle = 3600

# WARNING: *THE LINE BELOW MUST BE UNCOMMENTED ON A PRODUCTION ENVIRONMENT*
# Debug mode will enable the interactive debugging tool, allowing ANYONE to
# execute malicious code after an exception is raised.
#set debug = false

# Logging configuration
# Add additional loggers, handlers, formatters here
# Uses python's logging config file format
# http://docs.python.org/lib/logging-config-fileformat.html

templating.mako.compiled_templates_dir = %(here)s/data/templates

[loggers]
keys = root, moksha, sqlalchemy, tg, auth, pylons

[handlers]
keys = console

[formatters]
keys = generic

# If you create additional loggers, add them as a key to [loggers]
[logger_root]
level = INFO
handlers = console

[logger_moksha]
level = DEBUG
handlers =
qualname = moksha

[logger_tg]
level = INFO
handlers =
qualname = tg

# repoze.who is noisy by default
[logger_auth]
level = WARNING
handlers =
qualname = auth


[logger_pylons]
level = INFO
handlers =
qualname = pylons

[logger_sqlalchemy]
level = INFO
handlers =
qualname = sqlalchemy.engine
# "level = INFO" logs SQL queries.
# "level = DEBUG" logs SQL queries and results.
# "level = WARN" logs neither.  (Recommended for production systems.)

# If you create additional handlers, add them as a key to [handlers]
[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

# If you create additional formatters, add them as a key to [formatters]
[formatter_generic]
format = %(asctime)s,%(msecs)03d %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S
